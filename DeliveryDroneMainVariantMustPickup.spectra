import "./imports/DwyerPatterns.spectra"

spec DeliveryDroneMainVariantMustPickup //Computation time: ~100s  
/*This specification includes:
 * If eligible, Drone must pick up a house request (does not have to pickup from warehouse). 
 * In addition, if drone is charging and didn't come directly from the warehouse, he must pass by the warehouse after the charge.
 * When drone has no more tasks (no requests nor drop-offs) - it stays put.
 * Drone must drop off a package/envelope upon arriving to its destination.
 * Features includes: energy and winds (can comment them out)
 */
/* ======================================== TYPES ==============================================*/
type Cord = Int(0..GRID_DIM);

type PickUp = {NO_PICKUP,
	PICKUP_FROM_HOUSE1,PICKUP_FROM_HOUSE2,PICKUP_FROM_HOUSE3,PICKUP_FROM_HOUSE4,
	PICKUP_TO_HOUSE1,PICKUP_TO_HOUSE2,PICKUP_TO_HOUSE3,PICKUP_TO_HOUSE4};
type DropOff = {NO_DROPOFF,
	DROPOFF_AT_HOUSE1,DROPOFF_AT_HOUSE2,
	DROPOFF_AT_HOUSE3,DROPOFF_AT_HOUSE4,
	DROPOFF_AT_WH_PACKAGE, DROPOFF_AT_WH_ENVELOPE};
	
/* ======================================== DEFINES ==============================================*/
define
	GRID_DIM := 3; //actually 3+1
// Specify locations of warehouse, charging station and houses on the grid, and drone capacity
//These can be modified in accordance with the GridPanel.java
// drone[0] is row , drone[1] is column
define
	atWarehouse := drone[0] = 3 & drone[1] = 3;
	atChargingStation := drone[0] = 3 & drone[1] = 2;
	atHouse1 := drone[0] = 0 & drone[1] = 0;
	atHouse2 := drone[0] = 0 & drone[1] = 2;
	atHouse3 := drone[0] = 2 & drone[1] = 0;
	atHouse4 := drone[0] = 2 & drone[1] = 2;
define PACKAGE_CAPACITY := 2; 
define ENVELOPE_CAPACITY := 5;

define
	NUM_OF_HOUSES := 4;
	NUM_OF_HOUSES_MINUS_ONE := 3;

define 
	housePickedup := pickUpThisState = PICKUP_FROM_HOUSE1 | pickUpThisState = PICKUP_FROM_HOUSE2 |
	 				pickUpThisState = PICKUP_FROM_HOUSE3 | pickUpThisState = PICKUP_FROM_HOUSE4 ;
	warehousePickedup := pickUpThisState = PICKUP_TO_HOUSE1 | pickUpThisState = PICKUP_TO_HOUSE2 |
						pickUpThisState = PICKUP_TO_HOUSE3 | pickUpThisState = PICKUP_TO_HOUSE4;
	housePackagePickup:= (pickUpThisState = PICKUP_FROM_HOUSE1 & !envelopeRequests[0])|
						 (pickUpThisState = PICKUP_FROM_HOUSE2 & !envelopeRequests[1])|
						 (pickUpThisState = PICKUP_FROM_HOUSE3 & !envelopeRequests[2])|
						 (pickUpThisState = PICKUP_FROM_HOUSE4 & !envelopeRequests[3]);
	
define
	packageDelivered := !(dropOffThisState = DROPOFF_AT_WH_ENVELOPE) & !(dropOffThisState = NO_DROPOFF); 
	envelopeDelivered := (dropOffThisState = DROPOFF_AT_WH_ENVELOPE); 

define roomForPickupPackage := totalPackages + 1 <= PACKAGE_CAPACITY; 
		roomForPickupEnvelope := totalEnvelopesToWH + 1 <= ENVELOPE_CAPACITY; 
		
define packageWaitingInWarehouse := outWarehousePackages[0] | outWarehousePackages[1] |outWarehousePackages[2] | outWarehousePackages[3];
	packageWaitingInHouses := outHousePackages[0] | outHousePackages[1] | outHousePackages[2] | outHousePackages[3];

define stay :=  next(drone[0]) = drone[0] & next(drone[1])= drone[1];

/* ======================================== PREDICATES ==============================================*/
predicate moveDir(Cord pos):
  pos+1 = next(pos) |
  pos-1 = next(pos); 
  
predicate notMoveDir(Cord pos): 
  pos   = next(pos);
  
/* ======================================== ENV VARIABLS ==============================================*/
env boolean[NUM_OF_HOUSES] outHousePackages;
env boolean[NUM_OF_HOUSES] outWarehousePackages;
env boolean[NUM_OF_HOUSES] envelopeRequests;

/* ======================================== SYSTEM VARIABLES ==============================================*/
sys Cord[2] drone;
sys PickUp pickUpThisState;
sys DropOff dropOffThisState;

/* ======================================== ASSUMPTIONS ==============================================*/
// Init houses output to be empty at start of the simulation
asm initHousesEmpty:
forall i in Int(0..NUM_OF_HOUSES_MINUS_ONE) .
		outHousePackages[i] = false;

// Init warehouse output to be empty at start of the simulation
asm initWarehouseEmpty:
forall i in Int(0..NUM_OF_HOUSES_MINUS_ONE) .
		outWarehousePackages[i] = false;
		
// Init envelope to be false at start of the simulation
asm initEnvelopeModeOff:
forall i in Int(0..NUM_OF_HOUSES_MINUS_ONE) .
		envelopeRequests[i] = false;
	
asm G outWarehousePackages[0] -> next(outWarehousePackages[0]) | pickUpThisState=PICKUP_TO_HOUSE1;
asm G outWarehousePackages[1] -> next(outWarehousePackages[1]) | pickUpThisState=PICKUP_TO_HOUSE2;
asm G outWarehousePackages[2] -> next(outWarehousePackages[2]) | pickUpThisState=PICKUP_TO_HOUSE3;
asm G outWarehousePackages[3] -> next(outWarehousePackages[3]) | pickUpThisState=PICKUP_TO_HOUSE4;	
asm G outHousePackages[0] -> next(outHousePackages[0]) | pickUpThisState=PICKUP_FROM_HOUSE1;
asm G outHousePackages[1] -> next(outHousePackages[1]) | pickUpThisState=PICKUP_FROM_HOUSE2;
asm G outHousePackages[2] -> next(outHousePackages[2]) | pickUpThisState=PICKUP_FROM_HOUSE3;
asm G outHousePackages[3] -> next(outHousePackages[3]) | pickUpThisState=PICKUP_FROM_HOUSE4;

/* ======================================== INVENTORY ==============================================*/
//all packages on the drone
counter totalPackages(0..PACKAGE_CAPACITY){ 
	totalPackages =0;
	inc: housePackagePickup | warehousePickedup;
	dec: packageDelivered;
	overflow:false;
	underflow:false;
}
// all envelopes on the drone
counter totalEnvelopesToWH(0..ENVELOPE_CAPACITY){ 
	totalEnvelopesToWH =0;
	inc: housePickedup& !housePackagePickup;
	dec: envelopeDelivered;
	overflow:false;
	underflow:false;
}
// counter packages from Houses -> Warehouse
counter droneToWarehouseCap(0..PACKAGE_CAPACITY){
	droneToWarehouseCap = 0;
	inc: housePackagePickup ;
	dec: dropOffThisState = DROPOFF_AT_WH_PACKAGE;
	overflow:false;
	underflow:false;
}
// counters packages from Warehouse -> Houses#
counter droneToHouseCap1(0..PACKAGE_CAPACITY){
	droneToHouseCap1 = 0;
	inc: pickUpThisState = PICKUP_TO_HOUSE1;
	dec: dropOffThisState = DROPOFF_AT_HOUSE1;
	overflow:false;
	underflow:false;
}
counter droneToHouseCap2(0..PACKAGE_CAPACITY){
	droneToHouseCap2 = 0;
	inc: pickUpThisState = PICKUP_TO_HOUSE2;
	dec: dropOffThisState = DROPOFF_AT_HOUSE2;
	overflow:false;
	underflow:false;
}
counter droneToHouseCap3(0..PACKAGE_CAPACITY){
	droneToHouseCap3 = 0;
	inc: pickUpThisState = PICKUP_TO_HOUSE3;
	dec: dropOffThisState = DROPOFF_AT_HOUSE3;
	overflow:false;
	underflow:false;
}
counter droneToHouseCap4(0..PACKAGE_CAPACITY){
	droneToHouseCap4 = 0;
	inc: pickUpThisState = PICKUP_TO_HOUSE4;
	dec: dropOffThisState = DROPOFF_AT_HOUSE4;
	overflow:false;
	underflow:false;
}
	
/* ============================================ GUARANTEES ================================== */
// Init location of drone and no pick up and no drop off
gar atWarehouse;
// Init pickup/dropoff states
gar initPickUpThisState:
	pickUpThisState = NO_PICKUP;
gar initDropOffThisState:
	dropOffThisState = NO_DROPOFF;
	
/*========================================== DRONE MOVEMENT LOGIC  =================================== */
// Ensure at every step drone has to decide if to make a move in both row and col directions
gar droneMoves:
	G moveDir(drone[0]) & moveDir(drone[1]) | (notMoveDir(drone[0]) & moveDir(drone[1])) | (moveDir(drone[0]) & notMoveDir(drone[1])) | (notMoveDir(drone[0]) & notMoveDir(drone[1]));

//Drone does not move if there is nothing to do
gar G (!packageWaitingInWarehouse & !packageWaitingInHouses & totalEnvelopesToWH=0 & totalPackages=0)-> stay;
gar G !(dropOffThisState = NO_DROPOFF) -> stay;

// ================================== PICKUP LOGIC ======================================
// guarantees when a pickup can be made + implications on monitor
gar G pickUpThisState = PICKUP_FROM_HOUSE1 -> atHouse1 & outHousePackages[0] & ((!envelopeRequests[0] & roomForPickupPackage) |(envelopeRequests[0] & roomForPickupEnvelope));
gar G pickUpThisState = PICKUP_FROM_HOUSE2 -> atHouse2 & outHousePackages[1] & ((!envelopeRequests[1] & roomForPickupPackage) |(envelopeRequests[1] & roomForPickupEnvelope));
gar G pickUpThisState = PICKUP_FROM_HOUSE3 -> atHouse3 & outHousePackages[2] & ((!envelopeRequests[2] & roomForPickupPackage) |(envelopeRequests[2] & roomForPickupEnvelope));
gar G pickUpThisState = PICKUP_FROM_HOUSE4 -> atHouse4 & outHousePackages[3] & ((!envelopeRequests[3] & roomForPickupPackage) |(envelopeRequests[3] & roomForPickupEnvelope));

gar G pickUpThisState = PICKUP_TO_HOUSE1 -> atWarehouse & outWarehousePackages[0] & roomForPickupPackage;
gar G pickUpThisState = PICKUP_TO_HOUSE2 -> atWarehouse & outWarehousePackages[1] & roomForPickupPackage;
gar G pickUpThisState = PICKUP_TO_HOUSE3 -> atWarehouse & outWarehousePackages[2] & roomForPickupPackage;
gar G pickUpThisState = PICKUP_TO_HOUSE4 -> atWarehouse & outWarehousePackages[3] & roomForPickupPackage;

// always eventually pick up a waiting package	
gar pRespondsToS(outHousePackages[0], pickUpThisState = PICKUP_FROM_HOUSE1);
gar pRespondsToS(outHousePackages[1], pickUpThisState = PICKUP_FROM_HOUSE2);
gar pRespondsToS(outHousePackages[2], pickUpThisState = PICKUP_FROM_HOUSE3);
gar pRespondsToS(outHousePackages[3], pickUpThisState = PICKUP_FROM_HOUSE4);

gar pRespondsToS(outWarehousePackages[0], pickUpThisState = PICKUP_TO_HOUSE1);
gar pRespondsToS(outWarehousePackages[1], pickUpThisState = PICKUP_TO_HOUSE2);
gar pRespondsToS(outWarehousePackages[2], pickUpThisState = PICKUP_TO_HOUSE3);
gar pRespondsToS(outWarehousePackages[3], pickUpThisState = PICKUP_TO_HOUSE4);

/*======================================== MUST PICKUP LOGIC  ===================================== */ 
gar G  atHouse1 & outHousePackages[0] & ((!envelopeRequests[0] & roomForPickupPackage) |(envelopeRequests[0] & roomForPickupEnvelope)) -> stay;
gar G  atHouse2 & outHousePackages[1] & ((!envelopeRequests[1] & roomForPickupPackage) |(envelopeRequests[1] & roomForPickupEnvelope)) -> stay;
gar G  atHouse3 & outHousePackages[2] & ((!envelopeRequests[2] & roomForPickupPackage) |(envelopeRequests[2] & roomForPickupEnvelope)) ->stay;
gar G  atHouse4 & outHousePackages[3] & ((!envelopeRequests[3] & roomForPickupPackage) |(envelopeRequests[3] & roomForPickupEnvelope)) ->stay;

// When charging (and not coming from warehouse) , checkout the warehouse;
gar trig [true]*[!atWarehouse][atChargingStation] |=> [atWarehouse];

// ================================== MUST DROP OFF LOGIC ======================================
// guarantees when a drop-off can be made
gar G dropOffThisState = DROPOFF_AT_HOUSE1 iff atHouse1 & droneToHouseCap1 > 0;
gar G dropOffThisState = DROPOFF_AT_HOUSE2 iff atHouse2 & droneToHouseCap2 > 0;
gar G dropOffThisState = DROPOFF_AT_HOUSE3 iff atHouse3 & droneToHouseCap3 > 0;
gar G dropOffThisState = DROPOFF_AT_HOUSE4 iff atHouse4 & droneToHouseCap4 > 0;
gar G dropOffThisState = DROPOFF_AT_WH_PACKAGE iff atWarehouse & droneToWarehouseCap > 0;
gar G dropOffThisState = DROPOFF_AT_WH_ENVELOPE iff atWarehouse & totalEnvelopesToWH > 0 & droneToWarehouseCap = 0;

// always eventually drop-off packages that are carried by the drone
gar pRespondsToS(droneToHouseCap1 > 0,atHouse1);
gar pRespondsToS(droneToHouseCap2 > 0,atHouse2);
gar pRespondsToS(droneToHouseCap3 > 0,atHouse3);
gar pRespondsToS(droneToHouseCap4 > 0,atHouse4);
gar pRespondsToS(droneToWarehouseCap > 0,atWarehouse);
gar pRespondsToS(totalEnvelopesToWH > 0,atWarehouse);

// drone have to drop-off all packages before leaving the house/warehouse
gar G atHouse1 & droneToHouseCap1 > 1 | 
	atHouse2 & droneToHouseCap2 > 1 | 
	atHouse3 & droneToHouseCap3 > 1 | 
	atHouse4 & droneToHouseCap4 > 1 |
	atWarehouse & droneToWarehouseCap > 1 | atWarehouse & totalEnvelopesToWH > 1 -> stay;

/* ================================ WINDS LOGIC ======================================== */	
// To turn off winds comment the marked lines
env boolean windsMode;
asm windsMode=false; // *comment out

gar G moveDir(drone[0]) & moveDir(drone[1]) -> !windsMode; // *comment out

/* ================================ PRIORITY LOGIC ======================================== */	
// To turn off priority comment the marked lines
env boolean priorityMode;
//asm priorityMode=false; // *comment out

counter priorityCap(0..1){
	priorityCap=0; 
	//inc: housePickedup & priorityMode & packageWaitingInWarehouse; // *comment out
	reset: warehousePickedup;
	overflow: false; 
}
gar G priorityCap <= 1;

/*================================ ENERGY LOGIC  =================================== */
// To turn off energy comment the marked lines
define MAX_ENERGY:= 7;

counter energy (0..MAX_ENERGY){
	energy=0;
	inc: housePackagePickup | warehousePickedup; // *comment out
	reset: atChargingStation;
	overflow: false;
}
gar G energy <= MAX_ENERGY;
