import "./imports/DwyerPatterns.spectra"

spec DeliveryDroneMain

/* ======================================== TYPES ==============================================*/
type Cord = Int(0..GRID_DIM);

/* ======================================== DEFINES ==============================================*/
// drone[0] is row , drone[1] is column
define
	GRID_DIM := 3; //actually 3+1
// Specify locations of warehouse, charging station and houses on the grid, and drone capacity
//These can be modified in accordance with the GridPanel.java
define
	atWarehouse := drone[0] = 3 & drone[1] = 3;
	atChargingStation := drone[0] = 3 & drone[1] = 2;
	atHouse1 := drone[0] = 0 & drone[1] = 0;
	atHouse2 := drone[0] = 0 & drone[1] = 2;
	atHouse3 := drone[0] = 2 & drone[1] = 0;
	atHouse4 := drone[0] = 2 & drone[1] = 2;
define PACKAGE_CAPACITY := 2; 
define ENVELOPE_CAPACITY := 6;

define
	NUM_OF_HOUSES := 4;
	NUM_OF_HOUSES_MINUS_ONE := 3;

define 
	housePickedup := pickUpThisState > 0 & pickUpThisState <5 ;
	warehousePickedup := pickUpThisState > 4 & pickUpThisState <9;
	housePackagePickup:= (pickUpThisState=1 & !envelopeRequests[0])| (pickUpThisState=2 & !envelopeRequests[1])|(pickUpThisState=3 & !envelopeRequests[2])|(pickUpThisState=4 & !envelopeRequests[3]);
	
define
	packageDelivered := dropOffThisState > 0 & dropOffThisState<6; 
	envelopeDelivered := dropOffThisState = 6; 

define roomForPickupPackage := totalPackages + 1 <= PACKAGE_CAPACITY; 
		roomForPickupEnvelope := totalEnvelopesToWH + 1 <= ENVELOPE_CAPACITY; 
		
define packageWaitingInWarehouse := waitingPackageInWarehouseToHouse1 | waitingPackageInWarehouseToHouse2 |waitingPackageInWarehouseToHouse3 | waitingPackageInWarehouseToHouse4;

define stay :=  next(drone[0]) = drone[0] & next(drone[1])= drone[1];

/* ======================================== PREDICATES ==============================================*/
predicate moveDir(Cord pos):
  pos+1 = next(pos) |
  pos-1 = next(pos); 
  
predicate notMoveDir(Cord pos): 
  pos   = next(pos);
  
/* ======================================== ENV VARIABLS ==============================================*/
env boolean[NUM_OF_HOUSES] outHousePackages;
env boolean[NUM_OF_HOUSES] outWarehousePackages;
env boolean[NUM_OF_HOUSES] envelopeRequests;

/* ======================================== SYSTEM VARIABLS ==============================================*/
sys Cord[2] drone;
sys Int(0..8) pickUpThisState;  // 0 - no pickup , 1-4 house package pickups by # ,  5-8 warehouse  pickup to house (#-4)
sys Int(0..6) dropOffThisState;  // 0 - no drop-off , 1-4 house drop-offs by #, 5 - warehouse drop-off ,6- warehouse drop-off envelope 

/* ======================================== ASSUMPTIONS ==============================================*/
// Init houses output to be empty at start of the simulation
asm initHousesEmpty:
forall i in Int(0..NUM_OF_HOUSES_MINUS_ONE) .
		outHousePackages[i] = false;

// Init warehouse output to be empty at start of the simulation
asm initWarehouseEmpty:
forall i in Int(0..NUM_OF_HOUSES_MINUS_ONE) .
		outWarehousePackages[i] = false;
		
// Init envelope to be false at start of the simulation
asm initEnvelopeModeOff:
forall i in Int(0..NUM_OF_HOUSES_MINUS_ONE) .
		envelopeRequests[i] = false;

/* ======================================== INVENTORY ==============================================*/
//all packages on the drone
counter totalPackages(0..PACKAGE_CAPACITY){ 
	totalPackages =0;
	inc: housePackagePickup | warehousePickedup;
	dec: packageDelivered;
	overflow:false;
	underflow:false;
}
// all envelopes on the drone
counter totalEnvelopesToWH(0..ENVELOPE_CAPACITY){ 
	totalEnvelopesToWH =0;
	inc: housePickedup& !housePackagePickup;
	dec: envelopeDelivered;
	overflow:false;
	underflow:false;
}
// counter packages from Houses -> Warehouse
counter droneToWarehouseCap(0..PACKAGE_CAPACITY){
	droneToWarehouseCap = 0;
	inc: housePackagePickup ;
	dec: dropOffThisState =5;
	overflow:false;
	underflow:false;
}
// counters packages from Warehouse -> Houses#
counter droneToHouseCap1(0..PACKAGE_CAPACITY){
	droneToHouseCap1 = 0;
	inc: pickUpThisState =5;
	dec: dropOffThisState = 1;
	overflow:false;
	underflow:false;
}
counter droneToHouseCap2(0..PACKAGE_CAPACITY){
	droneToHouseCap2 = 0;
	inc: pickUpThisState =6;
	dec: dropOffThisState = 2;
	overflow:false;
	underflow:false;
}
counter droneToHouseCap3(0..PACKAGE_CAPACITY){
	droneToHouseCap3 = 0;
	inc: pickUpThisState = 7;
	dec: dropOffThisState = 3;
	overflow:false;
	underflow:false;
}
counter droneToHouseCap4(0..PACKAGE_CAPACITY){
	droneToHouseCap4 = 0;
	inc: pickUpThisState = 8;
	dec: dropOffThisState = 4;
	overflow:false;
	underflow:false;
}
	
/* ==================== MONITORS TO WATCH PACKAGES WAIT TILL PICKED UP FROM OUT-HOUSE ============================*/
monitor boolean waitingPackageOutHouse1{
	!waitingPackageOutHouse1;
	G waitingPackageOutHouse1 = outHousePackages[0]   | PREV(waitingPackageOutHouse1);
}
monitor boolean waitingPackageOutHouse2{
	!waitingPackageOutHouse2;
	G waitingPackageOutHouse2 = outHousePackages[1]   | PREV(waitingPackageOutHouse2);
}
monitor boolean waitingPackageOutHouse3{
	!waitingPackageOutHouse3;
	G waitingPackageOutHouse3 = outHousePackages[2] | PREV(waitingPackageOutHouse3);
}
monitor boolean waitingPackageOutHouse4{
	!waitingPackageOutHouse4;
	G waitingPackageOutHouse4 =outHousePackages[3] | PREV(waitingPackageOutHouse4);
}

/*======================== MONITORS TO WATCH PACKAGES WAIT TILL PICKED UP FROM WAREHOUSE ==========================*/
monitor boolean waitingPackageInWarehouseToHouse1{
	!waitingPackageInWarehouseToHouse1;
	G waitingPackageInWarehouseToHouse1 = outWarehousePackages[0]  | PREV(waitingPackageInWarehouseToHouse1); 
}
monitor boolean waitingPackageInWarehouseToHouse2{
	!waitingPackageInWarehouseToHouse2;
	G waitingPackageInWarehouseToHouse2 = outWarehousePackages[1]  | PREV(waitingPackageInWarehouseToHouse2); 
}
monitor boolean waitingPackageInWarehouseToHouse3{
	!waitingPackageInWarehouseToHouse3;
	G waitingPackageInWarehouseToHouse3 = outWarehousePackages[2]  | PREV(waitingPackageInWarehouseToHouse3); 
}
monitor boolean waitingPackageInWarehouseToHouse4{
	!waitingPackageInWarehouseToHouse4;
	G waitingPackageInWarehouseToHouse4 = outWarehousePackages[3]  | PREV(waitingPackageInWarehouseToHouse4); 
}

/* ============================================ GUARANTEES ================================== */
// Init location of drone at the start of the simulation
gar startAtChargingStation:
	atWarehouse;

// Init pickup/dropoff states
gar initPickUpThisState:
	pickUpThisState = 0;
gar initDropOffThisState:
	dropOffThisState = 0;
	
// Ensure at every step drone has to decide if to make a move in both row and col directions
gar droneMoves:
	G moveDir(drone[0]) & moveDir(drone[1]) | (notMoveDir(drone[0]) & moveDir(drone[1])) | (moveDir(drone[0]) & notMoveDir(drone[1])) | (notMoveDir(drone[0]) & notMoveDir(drone[1]));

// ================================== PICKUP LOGIC ======================================
// guarantees when a pickup can be made + implications on monitor
gar G pickUpThisState = 1 -> atHouse1 & waitingPackageOutHouse1 & ((!envelopeRequests[0] & roomForPickupPackage) |(envelopeRequests[0] & roomForPickupEnvelope)) & next(waitingPackageOutHouse1)=false;
gar G pickUpThisState = 2 -> atHouse2 & waitingPackageOutHouse2 & ((!envelopeRequests[1] & roomForPickupPackage) |(envelopeRequests[1] & roomForPickupEnvelope)) & next(waitingPackageOutHouse2)=false;
gar G pickUpThisState = 3 -> atHouse3 & waitingPackageOutHouse3 & ((!envelopeRequests[2] & roomForPickupPackage) |(envelopeRequests[2] & roomForPickupEnvelope)) & next(waitingPackageOutHouse3)=false;
gar G pickUpThisState = 4 -> atHouse4 & waitingPackageOutHouse4 & ((!envelopeRequests[3] & roomForPickupPackage) |(envelopeRequests[3] & roomForPickupEnvelope)) & next(waitingPackageOutHouse4)=false ;

gar G pickUpThisState = 5 -> atWarehouse & waitingPackageInWarehouseToHouse1 & roomForPickupPackage & next(waitingPackageInWarehouseToHouse1)=false;
gar G pickUpThisState = 6 -> atWarehouse & waitingPackageInWarehouseToHouse2 & roomForPickupPackage & next(waitingPackageInWarehouseToHouse2)=false;
gar G pickUpThisState = 7 -> atWarehouse & waitingPackageInWarehouseToHouse3 & roomForPickupPackage & next(waitingPackageInWarehouseToHouse3)=false ;
gar G pickUpThisState = 8 -> atWarehouse & waitingPackageInWarehouseToHouse4 & roomForPickupPackage & next(waitingPackageInWarehouseToHouse4)=false;

// always eventually pick up a waiting package	
gar pRespondsToS(waitingPackageOutHouse1, pickUpThisState = 1);
gar pRespondsToS(waitingPackageOutHouse2, pickUpThisState = 2);
gar pRespondsToS(waitingPackageOutHouse3, pickUpThisState = 3);
gar pRespondsToS(waitingPackageOutHouse4, pickUpThisState = 4);

gar pRespondsToS(waitingPackageInWarehouseToHouse1, pickUpThisState = 5);
gar pRespondsToS(waitingPackageInWarehouseToHouse2, pickUpThisState = 6);
gar pRespondsToS(waitingPackageInWarehouseToHouse3, pickUpThisState = 7);
gar pRespondsToS(waitingPackageInWarehouseToHouse4, pickUpThisState = 8);

// ================================== MUST DROP OFF LOGIC ======================================
// guarantees when a drop-off can be made
gar G dropOffThisState = 1 iff atHouse1 & droneToHouseCap1 > 0;
gar G dropOffThisState = 2 iff atHouse2 & droneToHouseCap2 > 0;
gar G dropOffThisState = 3 iff atHouse3 & droneToHouseCap3 > 0;
gar G dropOffThisState = 4 iff atHouse4 & droneToHouseCap4 > 0;
gar G dropOffThisState = 5 iff atWarehouse & droneToWarehouseCap > 0;
gar G dropOffThisState = 6 iff atWarehouse & totalEnvelopesToWH > 0;

// always eventually drop-off packages that are carried by the drone
gar pRespondsToS(droneToHouseCap1 > 0,atHouse1);
gar pRespondsToS(droneToHouseCap2 > 0,atHouse2);
gar pRespondsToS(droneToHouseCap3 > 0,atHouse3);
gar pRespondsToS(droneToHouseCap4 > 0,atHouse4);
gar pRespondsToS(droneToWarehouseCap > 0,atWarehouse);
gar pRespondsToS(totalEnvelopesToWH > 0,atWarehouse);

// drone have to drop-off all packages before leaving the house/warehouse
gar G atHouse1 & droneToHouseCap1 > 1 | 
	atHouse2 & droneToHouseCap2 > 1 | 
	atHouse3 & droneToHouseCap3 > 1 | 
	atHouse4 & droneToHouseCap4 > 1 |
	atWarehouse & droneToWarehouseCap > 1 | atWarehouse & totalEnvelopesToWH > 1 -> stay;

/* ================================ WINDS LOGIC ======================================== */	
// To turn off winds comment the marked lines
env boolean windsMode;
asm windsMode=false; // *comment out

gar droneMovesWithWind: // *comment out
	G moveDir(drone[0]) & moveDir(drone[1]) -> !windsMode; // *comment out

/* ================================ PRIORITY LOGIC ======================================== */	
// To turn off priority comment the marked lines
env boolean priorityMode;
asm priorityMode=false; // *comment out

counter priorityCap(0..1){
	priorityCap=0; 
	inc: housePickedup & priorityMode & packageWaitingInWarehouse; // *comment out
	reset: warehousePickedup;
	overflow: false; 
}
gar G priorityCap <= 1;

/*================================ ENERGY LOGIC  =================================== */
// To turn off energy comment the marked lines
define MAX_ENERGY:= 7;
define DONT_CHARGR_BEFORE_PICKUPS:= 6; // number belongs to the group {0,...,(MAX_ENERGY-1)} 

counter energy (0..MAX_ENERGY){
	energy=0;
	inc: housePackagePickup | warehousePickedup; // *comment out
	reset: atChargingStation;
	overflow: false;
}
gar G energy <= MAX_ENERGY;
gar G atChargingStation -> energy >= DONT_CHARGR_BEFORE_PICKUPS;
