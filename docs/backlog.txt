Tasks:

Done:
Front-end:
* Implemented a grid panel that represent the current state of the simulation.
* Implemented a menu that support manual input entry for the environment variables.
* Implement a "Charging bar" that shows the drone's battery status.
* Implement a new environment variables - 'Strong Winds'.
** As a visual effect.
** As an option of input at manual menu.
* Improve visual styling.
* Add to manual menu the ability to enable 'Priority Mode'.
* Add to the Grid a "Control Panel" that summarize all the information about the drone's state.
* Add support for envelopes feature (see Specification)
** Menu support - request envelope delivery
** Grid support - show details on the drone control panel.
* Add Automate Mode (Demo Mode)
* Built scenario management + 3 basic scenarios.
* Built scenario menu.
* Add more scenarios.
** Built 5 more scenarios (for a total of 8)
** Built the 'loading screen' before starting a scenario.
*** Before each scenario is executed we clear the state of the environment to be empty (as in the init state).
* Add Tooltips to scenario menu, as well as general buttons.
** For scenario dropdown - short description of the scenario.
* Add GUI Winds animation.
* Add 'Random Request' Button - addes a random package/envelope at a random location.
* Added 'Fast Forward Step' functionality to scenarios - this speeds up the drone and can be used to fast forward to the next step of the scenario.
* Add Modularity Features (GUI):
** Upon program start and based on the current spec. synthesized - adjust the features to be shown on the GUI (priority, winds, energy).
** This is done by a pop-up window at the start of the program.
* Changed the PickUpThisState and DropOffThisState types to be Enums.
* (Sprint4) Changed to control panel styling.


Specification:
* Create the basic Drone mechanism : Request Delivery, Pickup , Drop-off packages from/to houses and warehouse.
* Implemented a capacity and inventory management system
* Variant (MustDropoff) : implemented a controller that must drop-off all items for a destination upon entering that location.
NoMustDropOff was added as a variant (disabling this behavior).
* Implement a 'Charging' mechanism: 
s.t. the drone can make an at most X amount of pickups without being charged (returning to the charging station)
* Implement 'Priority Mode' - an environment variable that when is true (i.e. 'Priority Mode' is on) we change our pickup policy:
** The drone prioritize picking up packages from Warehouse over Houses.
** Nonetheless, The drone can pick up at most PRIORITY_CAP number of packages from Houses. This can be parameterized.
*** This was intended to prevent house package starvation.
** When a package is picked up from the Warehouse, the # of packages that can be picked up from Houses is reset.
* Implement 'Strong Winds' environment - forbids drone's movement diagonally.
* Added 'envelopes' - light-weight packages.
* Integrated 'Must-Drop-Off' feature to the main specification.
* (Sprint4) Changed the monitors system to an assumption-based system:
** Instead of monitors to keep track of waiting requests, we included environment assumption s.t. a request is true untill it is picked up. 
* Changed the PickUpThisState and DropOffThisState types to be Enums.
* Added to the Main variant a functionality s.t. if drone has no requests waiting or packages to deliver it stays put.

* Added Variants (sprint4):

** Added 'LessMoves' specification variant.
*** This variant attemps to make fewer drone movement steps, at certain situations: 
**** When drone has no more tasks (no requests nor drop-offs) - it returns to the warehouse.
**** Don't stagger in a house - when visiting a house, after 1 safety state for stocking,
do not visit that house for at least 4 states.
**** After every pickup Drone must drop off that package/envelope after at most 2 other steps.
**** Drone must drop off a package/envelope upon arriving to its destination.
**** Features included: energy 
*** In addition, we added an unrealizable version we encountered.

** Added 'Charge only when needed' specification variant.
*** Do not pass by the charging station unless some amount of eneregy had been used.
*** This amount is parameterized and can be changed in the spec. file (can be anything from 0 to MAX_ENERGY-1).

** Added 'MustPickup' specification variants.
*** In this spec. if the drone is at a house where there's a package/envelope waiting, and he has the capabilty to pick it up - then it must do so.
*** Since this guarantee added to the main spec. increased computing time significantly (about an hour), we created basic option:
**** A basic drone spec. file (no priority, winds nor energy) with the added functionality (about 6 min. of compute time).
*** In addition, we added an unrealizable versions we encountered.
*** If charging (and did not come from warehouse) - pass by the warehouse.
**** Features included: energy & winds.

* Add Modularity Features (Specification):
** Since we built our main spec. with 3 non-basic features (priority, winds, energy) that are non-dependent, we wanted to add the user the ability to turn them on/off easily.
** I.e. you can see in the spec. file where to "comment out" a specific feature.
** This is backed up by the GUI modulization pop-up that adjusts the GUI to your spec needs.
** This adds up to 7 new variants of the main specification - for the new combinations of these 3 features.


-------------------
Left To Do: N/A